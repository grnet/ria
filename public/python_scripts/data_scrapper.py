# -*- coding: utf-8 -*-
"""data_scrapper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BNQjws4C4ARZ1bb0BBOZkrIkyrXisDb
"""

import requests
import bs4
import json
from json import JSONEncoder

response = requests.get('https://government.gov.gr/kivernisi/')
soup = bs4.BeautifulSoup(response.text, 'html.parser')

# ministries=soup.select('ol li')
# roles=soup.select('ul li')
items=soup.select('li, p')

class Ministry:
  def __init__(self):
    self.roles = []
  def __init__(self, ministry):
    self.ministry = ministry
    self.roles = []
  def set_ministry_name(self,ministry):
    self.ministry = ministry
  def add_role(self,role):
    self.roles.append(role)

class MinistryEncoder(JSONEncoder):
    def default(self, o):
        return o.__dict__

class Role:
  def __init__(self, role, responsibility, name):
    self.role=role
    self.responsibility=responsibility
    self.name=name

class RoleEncoder(JSONEncoder):
    def default(self, o):
        return o.__dict__

allministries=[]
roles=[]
minname=None
for i in items:
  # print(i)
  if i.select('a'):
    pass
  if ':' in i.text:
    # print(i.text)
    tok=i.text.split(':')
    role=(tok[0], tok[1])
    
    # include code bellow if 'ΚΥΒΕΡΝΗΤΙΚΗ ΕΚΠΡΟΣΩΠΟΣ' is needed
    # word='ΚΥΒΕΡΝΗΤΙΚΗ ΕΚΠΡΟΣΩΠΟΣ'
    # if word in tok[0]:
    #   wordEndIndex = tok[0].index(word) + len(word)
    #   prefix=tok[0][:wordEndIndex]
    #   suffix=tok[0][wordEndIndex:]
    #   role=Role(prefix.strip(), suffix.strip(), tok[1].strip())
    #   # print(json.dumps(role, ensure_ascii=False, cls=RoleEncoder))
    #   roles.append(role)       

    # if code above is uncommented, change to elif
    if 'ΥΠΟΥΡΓΟΣ' in tok[0] and 'ΠΡΩΘΥΠΟΥΡΓΟΣ' not in tok[0]:
      word='ΥΠΟΥΡΓΟΣ'
      # print(tok[0])
      wordEndIndex = tok[0].index(word) + len(word)
      prefix=tok[0][:wordEndIndex]
      suffix=tok[0][wordEndIndex:]
      role=Role(prefix.strip(), suffix.strip(), tok[1].strip())
      # print(json.dumps(role, ensure_ascii=False, cls=RoleEncoder))
      roles.append(role)

    else:
      continue

  else:
    if (len(i.text)>0):
      if len(roles)==0:
        min=Ministry(i.text)
      else:
        # allministries.append(roles)
        for r in roles:
          min.add_role(r)
        allministries.append(min)  
        # print(json.dumps(min,ensure_ascii=False,cls=MinistryEncoder))
        roles=[]
        min=Ministry(i.text)


json_string = json.dumps(allministries,ensure_ascii=False,cls=MinistryEncoder)
print(json_string)

